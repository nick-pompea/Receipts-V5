# Dictionary
```
{
            List{
                Group{
                    
                    //MARK: New
                    DisclosureGroup {
                        Text("""
                    Button Style
                    Label Label Style
                    Preview Provider
                    Shape
                    View
                    View Modifier
                    """)
                        .multilineTextAlignment(.leading)
                        
                    } label: {Text("New")}
                    
                    //MARK: Controls
                    DisclosureGroup {
                        Text("""
                    Button
                    Color Picker
                    Date Picker
                    Disclosure Group
                    Edit Button
                    Form
                    Group Box
                    Label
                    Link
                    List
                    Menu
                    Navigation Link
                    Navigation View
                    Outline Group
                    Picker
                    Progress View
                    Scroll View
                    Section
                    Secure Field
                    Slider
                    Stepper
                    Tab View
                    Text Text
                    Text Editor
                    Text Field
                    Toggle
                    
                    """)
                        .multilineTextAlignment(.leading)
                        
                    } label: {Text("Controls")}
                    
                    //MARK: Layout
                    DisclosureGroup {
                        Text("""
                    Control Group
                    Depth Stack
                    Geometry Reader
                    Horizontal Stack
                    Lazy Horizontal Grid
                    Lazy Horizontal Stack
                    Lazy Vertical Grid
                    Lazy Vertical Stack
                    Scroll View Reader
                    Spacer
                    Vertical Stack
                    
                    """)
                        .multilineTextAlignment(.leading)
                        
                    } label: {Text("Layout")}
                    
                    //MARK: Gradient
                    DisclosureGroup {
                        Text("""
                    Angular Gradient
                    Elliptical Gradient
                    Linear Gradient
                    Radial Gradient
                    
                    """)
                        .multilineTextAlignment(.leading)
                        
                    } label: {Text("Gradient")}
                    
                    //MARK: Other
                    DisclosureGroup {
                        Text("""
                    Canvas
                    Capsule
                    Circle
                    Color
                    Container Relative Shape
                    Divider
                    Ellipse
                    Empty View
                    Group
                    Image
                    Path
                    Rectangle
                    Rounded Rectangle
                    Timeline View
                    
                    """)
                        .multilineTextAlignment(.leading)
                        
                    } label: {Text("Other")}
                    
                    //MARK: Controls
                    DisclosureGroup {
                        Text("""
                    Action Sheet
                    Alert
                    Badge
                    Context Menu
                    Focused
                    Item Provider
                    Popover
                    Sheet
                    Status Bar Hidden
                    Submit Scope
                    Tab Item
                    Toolbar
                    
                    """)
                        .multilineTextAlignment(.leading)
                        
                    } label: {Text("Controls")}
                    
                    //MARK: Effects
                    DisclosureGroup {
                        Text("""
                    Accent Color
                    Blend Mode
                    Blur
                    Border
                    Brightness
                    Clip Shape
                    Clipped
                    Color Multiply
                    Compositing Group
                    Content Shape
                    Contrast
                    Corner Radius
                    Drawing Group
                    Foreground Color
                    Foreground Style
                    Grayscale
                    Hover Effect
                    Hue Rotation
                    Invert
                    Luminance to Alpha
                    Mask
                    Matched Geometry Effect
                    Opacity
                    Preferred Color Scheme
                    Projection
                    Rotation 3D Effect
                    Rotation Effect
                    Saturation
                    Scale Effect
                    Shadow
                    Transform
                    
                    
                    """)
                        .multilineTextAlignment(.leading)
                        
                    } label: {Text("Effects")}
                    
                    //MARK: Layout
                    DisclosureGroup {
                        Text("""
                    Alignment Guide
                    Anchor Preference
                    Aspect Ratio
                    Background
                    Background Preference Value
                    Coordinate Space
                    Edges Ignoring Safe Area
                    Fixed Size
                    Frame
                    Full Screen Cover
                    Hidden
                    Ignores Safe Area
                    Labs! Labels Hidden
                    Layout Priority
                    Overlay
                    Overlav Preference Value
                    Padding
                    Position
                    Scaled to Fill
                    Scaled to Fit
                    Transform Anchor Preference
                    ZIndex
                    """)
                        .multilineTextAlignment(.leading)
                        
                    } label: {Text("Layout")}
                    
                    //MARK: Text
                    DisclosureGroup {
                        Text("""
                    Tight
                    Allows Tightening
                    Autocapitalization
                    Baseline Offset
                    Bold
                    Disable Autocorrection
                    Dynamic Type Size
                    Flips for Right to Left
                    Font
                    Font Weight
                    Italic
                    Kerning
                    Keyboard Type
                    Line Limit
                    Line Spacing
                    Minimum Scale Factor
                    Multiline Text Alignment
                    Search Completion
                    Searchable
                    Strikethrough
                    Text Case
                    Text Content Type
                    Tracking
                    Truncation Mode
                    Underline
                    
                    """)
                        .multilineTextAlignment(.leading)
                        
                    } label: {Text("Text")}
                    
                    //MARK: Image
                    DisclosureGroup {
                        Text("""
                    Antialiased
                    Image Rendering Mode
                    Image Resizable
                    Interpolation
                    Symbol Image Scale
                    Symbol Variant
                    
                    """)
                        .multilineTextAlignment(.leading)
                        
                    } label: {Text("Image")}
                }
                Group{
                    //MARK: List
                    DisclosureGroup {
                        Text("""
                    Delete Disabled
                    List Item Tint
                    List Row Background
                    List Row Insets
                    List Row Separator
                    List Row Separator Tint
                    Move Disabled
                    Swipe Actions
                    
                    """)
                        .multilineTextAlignment(.leading)
                        
                    } label: {Text("List")}
                    
                    //MARK: Navigation Bar
                    DisclosureGroup {
                        Text("""
                    Navigation Bar Back Button Hidden
                    Navigation Bar Hidden
                    Navigation Bar Title Display Mode
                    Title Navigation Title
                    
                    """)
                        .multilineTextAlignment(.leading)
                        
                    } label: {Text("Navigation Bar")}
                    
                    //MARK: Style
                    DisclosureGroup {
                        Text("""
                    Button Stvle
                    Control Group Style
                    Date Picker Style
                    Group Box Stvle
                    Index View Stvle
                    Label Label Stvle
                    List Stvle
                    Menu Style
                    Picker Style
                    Progress View Style
                    Tab View Style
                    Text Field Style
                    Toggle Style
                    
                    """)
                        .multilineTextAlignment(.leading)
                        
                    } label: {Text("Style")}
                    
                    //MARK: Accessibility
                    DisclosureGroup {
                        Text("""
                    Accessibility Activation Point
                    Accessibility Add Traits
                    Accessibilitv Children
                    Accessibility Custom Content
                    Accessibility Heading
                    Accessibility Hidden
                    Accessibility Hint
                    Accessibility Identifier
                    Accessibility Ignores Invert Colors
                    Accessibility Input Labels
                    Accessibility Label
                    Accessibility Remove Traits
                    Accessibility Representation
                    Accessibility Sort Priority
                    Accessibility Text Content Type
                    Accessibility Value
                    Action
                    Adiustable Action
                    Element
                    Scroll Action
                    Speech Adjusted Pitch
                    Speech Always Includes Punctuation
                    Speech Announcements Queued
                    Speech Phonetic Representation
                    Speech Spells Out Characters
                    
                    """)
                        .multilineTextAlignment(.leading)
                        
                    } label: {Text("Accessibility")}
                    
                    //MARK: Events
                    DisclosureGroup {
                        Text("""
                    On Appear
                    On Change
                    On Continue User Activity
                    On Delete
                    On Disappear
                    On Drag
                    On Hover
                    On Insert
                    On Move
                    On Open URL
                    On Preference Change
                    On Receive
                    On Submit
                    
                    """)
                        .multilineTextAlignment(.leading)
                        
                    } label: {Text("Events")}
                    
                    //MARK: Gesture
                    DisclosureGroup {
                        Text("""
                    High Priority Gesture
                    On Tap Gesture
                    Simultaneous Gesture
                    """)
                        .multilineTextAlignment(.leading)
                        
                    } label: {Text("Gesture")}
                    
                    //MARK: Shapes
                    DisclosureGroup {
                        Text("""
                    Fill
                    Offset
                    Rotation
                    Scale
                    Size
                    Stroke .stroke (Color.blue, lineWidth: 10)
                    Stroke Border
                    Transform
                    Trim
                    """)
                        .multilineTextAlignment(.leading)
                        
                    } label: {Text("Shapes")}
                    
                    //MARK: Gesture
                    DisclosureGroup {
                        Text("""
                    High Priority Gesture
                    On Tap Gesture
                    Simultaneous Gesture
                    """)
                        .multilineTextAlignment(.leading)
                        
                    } label: {Text("Gesture")}
                    
                    //MARK: Other / Time
                    DisclosureGroup {
                        Text("""
                    Allows Hit Testing
                    Animation
                    Default App Storage
                    Disabled
                    Environment
                    Environment Object
                    Equatable
                    Focused Value
                    Help
                    Id
                    Interactive Dismiss Disabled
                    Keyboard Shortcut
                    Preference
                    Privacy Sensitive
                    Redacted
                    Tag
                    Transaction
                    Transform Environment
                    Transform Preference
                    Transition
                    Unredacted
                    User Activity
                    DispatchQueue.main.asyncAfter(deadline: .now() + 1) {}
                    """)
                        .multilineTextAlignment(.leading)
                        
                    } label: {Text("Other / Time")}
                }
                Group{
                    //MARK: @States
                    DisclosureGroup {
                        Text("""
                    @Binding - Typically used with child view (Preview use constant(VALUE HERE)
                    
                    @Publisher - In class, current value publisher
                    
                    @ObservedObject - Typically used with class or actor
                    
                    @EnvironmentObject - No need for individual inits
                    
                    @State - Typically used with view
                    
                    @StateObject - Class reference in view
                    
                    @AppStorage
                    
                    @SceneStorage
                    
                    @FetchRequest
                                        
                    
                    """)
                        
                        
                    } label: {Text("@States")}
                    
                    //MARK: Arrays
                    DisclosureGroup {
                        Text("""
                    //sequence operations
                    .first(where: {$0 > 4})
                    .remove(at: 2)
                    .removeLast()
                    .dropFirst()
                    .dropFirst(3)
                    .drop(while: {$0 < 5})
                    .prefix(4)
                    .prefix(while: { $0 < 5 })
                    .output(at: 3)
                    .output(in: 2..<4)
                    .last(where: {$0 > 4 })
                    .map
                    .filter({ $0 % 2 == 0 })
                    $0 is the shortcut to mean the first parameter passed into the closure.
                    [index]
                    .map({String($0)})
                    .last()
                    
                    //mathematic operations
                                .max()
                                .max(by: { int1, int2 in
                                    return int1 < int2
                                })
                                .min()
                                .min(by: { int1, int2 in
                                    return int1 < int2
                                })
                    
                    
                    // Filter / Reduce
                                .map({String($0)})
                                .compactMap({ int in
                                    if int == 5 {
                                        return nil
                                    }
                                    return String(int)
                                })
                                .filter({ ($0 > 3) && ($0 < 7)})
                                .removeDuplicates()
                                .removeDuplicates(by: { int1,int2 in
                                    return int1 == int2
                                })
                                .replaceNil(with: 5)
                                .replaceEmpty(with: 5)
                                .replaceError(with: 5)
                                .scan(0, { existingValue, newValue in
                                    return existingValue + newValue
                                })// adds each value to the previous
                                .scan(0, {$0 + $1}) // same
                                .scan(0, +) // same too
                    
                    
                                .reduce(0, {  existingValue, newValue in
                                    return existingValue + newValue
                                }) // add all items
                                .reduce(0, +) // same
                                .collect()
                                .collect(3)
                                .allSatisfy({ $0 < 50 })
                    
                    
                    // Timing
                    
                                .debounce(for: 1, scheduler: DispatchQueue.main)
                                .delay(for: 2, scheduler: DispatchQueue.main)
                                .measureInterval(using: DispatchQueue.main)
                                .map({ stride in
                                    return (stride.timeInterval)
                                })
                                .throttle(for: 10, scheduler: DispatchQueue.main, latest: true)
                                .retry(3)
                                .timeout(5, scheduler: DispatchQueue.main)
                    
                    //Multiple Publishers / Subscribers 
                    
                    
                    """)
                       // .multilineTextAlignment(.leading)
                        
                    } label: {Text("Arrays")}
                    
                    //MARK: Operations
                    DisclosureGroup {
                        Text("""
                    .reduce
                    %
                    +=
                    -+
                    
                            for x in items {}  outside of view
                            ForEach inside of view
                            .indices
                    
                    .filter({ $0 % 2 == 0 })
                    append()
                    """)
                        .multilineTextAlignment(.leading)
                        
                    } label: {Text("Operations")}
                    
                    DisclosureGroup {
                        Text("""
                    newFunc() {}
                    
                    **Passing func from child view***
                    Child
                        var function: () -> Void?
                    Action
                                self.function()
                    Preview
                             function: {}
                    
                    Parent View
                                        function: {}
                    or
                                        function: incertFuncHere()
                    
                    
                    
                    newFunc(items: String) {}
                    newFunc(_ items: String) {}
                    newFunc(insideName OutsideName: String) {{
                    newFunc(items: String = defaultValue) {}
                    """)
                        .multilineTextAlignment(.leading)
                        
                    } label: {Text("Funcs")}
                    
                    //MARK: If Variants
                    DisclosureGroup {
                        Text("""
                    switch completion {
                    case.finished:
                        print ("Finished")
                    case.failure(let error):
                        print("error")
                    }
                    
                    Guard
                    
                    Ternary Operator
                                Text(isStarting ? "Starting state" : "Ending State")

                    
                    
                    """)
                        .multilineTextAlignment(.leading)
                        
                    } label: {Text("If Variants")}
                    
                    
                    
                    

                    
                }
            }
        }
```
